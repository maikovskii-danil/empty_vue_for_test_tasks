#!/usr/bin/env node

import fs from 'fs/promises';
import path from 'path';
import { fileURLToPath } from 'url';

const __dirname = path.dirname(fileURLToPath(import.meta.url));

const run = async () => {
  const date = new Date().toISOString().split('T')[0];

  // 1. –£–¥–∞–ª–∏—Ç—å .git
  try {
    await fs.rm(path.join(__dirname, '.git'), { recursive: true, force: true });
    console.log('‚úÖ .git —É–¥–∞–ª—ë–Ω');
  } catch (e) {
    console.warn('‚ö†Ô∏è .git –Ω–µ –Ω–∞–π–¥–µ–Ω');
  }

  // 2. –û—á–∏—Å—Ç–∏—Ç—å README.md –∏ –≤–ø–∏—Å–∞—Ç—å –±–∞–∑—É
  const readmePath = path.join(__dirname, 'README.md');
  const readmeContent = `# üß™ Test Task\n\nüóìÔ∏è ${date}\n\n## –£—Å—Ç–∞–Ω–æ–≤–∫–∞\n\`\`\`sh\nnpm install\nnpm run dev\n\`\`\`\n`;
  await fs.writeFile(readmePath, readmeContent, 'utf-8');
  console.log('‚úÖ README.md –æ–±–Ω–æ–≤–ª—ë–Ω');

  // 3. –£–¥–∞–ª–∏—Ç—å demo-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
  const demoDir = path.join(__dirname, 'src', 'demo-components');
  try {
    await fs.rm(demoDir, { recursive: true, force: true });
    console.log('‚úÖ src/demo-components –æ—á–∏—â–µ–Ω—ã');
  } catch (e) {
    console.warn('‚ö†Ô∏è demo-components –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
  }

  // 4. –ì–æ—Ç–æ–≤–æ
  console.log('\nüéÆ –®–∞–±–ª–æ–Ω –æ—á–∏—â–µ–Ω. –£–¥–∞—á–∏ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º!');
};

run();
